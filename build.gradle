allprojects {
    group = 'io.morethan.tweaky'
    version = projectVersion
}

ext.unitResults = file("$buildDir/reports/tests/unit")
ext.itResults = file("$buildDir/reports/tests/it")
ext.testResults = file("$buildDir/reports/tests/all")

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.15'
        classpath 'gradle.plugin.io.morethan.jmhreport:gradle-jmh-report:0.7.0'
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'

    apply from: rootProject.file("gradle/eclipse.gradle")

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile group: 'com.google.guava', name: 'guava', version: '23.0'

        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-alpha2'
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
        compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.0'

        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
        testCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: '1.0.0' // Avoid compiler warnings about @API annotations in JUnit code

        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.18.3'
        testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.18.3'

        testCompile group: 'org.assertj', name:'assertj-core', version:'3.9.0'
    }

    repositories {
        jcenter()
    }

    test {
        useJUnitPlatform()
        ignoreFailures project.hasProperty('ignoreTestFailures')
    }
    
    publishing {
        repositories {
            maven {
                url localMavenRepository
            }
        }

        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                if (project.name.equals('yarn-starter-yarn') || project.name.equals('yarn-starter-http')) {
                   // TODO this doesn't generate an own pom file so consumers have to disable transitve dependencies
                   artifact shadowJar
                }
            }
        }
    }

    task sourcesJar(type:Jar){
        classifier = "sources"
        from sourceSets.main.allSource
    }

}

task clean(group: 'Build', description: 'Deletes the build directory.') {
    dependsOn subprojects.collect { it.tasks.matching { it.name == 'clean' } }
    delete "$rootDir/build"
}

/**
 * Facade for the subproject test targets. Its main goal is to create a combined test report on all subprojects. 
 * Does not execute the tests of the test submodule since those are considered integration tests.
 */
task unit(type: TestReport, group: 'Verification', description: 'Runs the unit tests (All tests excluding those of the test subproject).') {
    destinationDir = unitResults
    reportOn (subprojects*.test - project(':tweaky-test').test)
    doLast {
        println "See reports at file://$unitResults/index.html"
    }
}

/**
 * Executes both, the unit test of each submodule and the integration tests.
 */
task test(type: TestReport, description: 'Runs the unit & it tests.', dependsOn: ['unit', 'tweaky-test:it']) {
    destinationDir = testResults
    reportOn subprojects*.test
    doLast {
        println "See test report: file://$testResults/index.html"
    }
}

