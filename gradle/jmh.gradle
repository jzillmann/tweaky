// Adds JMH integration to a project.
// Include it with: 
//   apply from: rootProject.file('gradle/jmh.gradle')

sourceSets {
    jmh {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

dependencies {
    jmhCompile project
    jmhCompile 'org.openjdk.jmh:jmh-core:1.18'
    jmhCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.18'
    jmhCompile 'com.github.biboudis:jmh-profilers:0.1.4'
    
    jmhCompile ('org.apache.hadoop:hadoop-mapreduce-client-core:2.7.2') {
        exclude (module: 'guava')
    }
}

eclipse {
    classpath {
        plusConfigurations.add(configurations.jmhCompile)
        defaultOutputDir = file('build/classes-jmh-ide')
    }
}

task ('jmhHelp', description:'Print help for the jmh task', group: 'Development') << {
    println ""
    println "Usage of jmh tasks:"
    println "~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    
    println "Only execute specific benchmark(s):"
    println "\tgw jmh -Pinclude=\".*MyBenchmark.*\""
    
    println ""
    println "Specify extra profilers:"
    println "\tgw jmh -Pprofilers=\"gc,stack\""
    
    println ""
    println "Prominent profilers (for full list call jmhProfilers task):"
    println "\tcomp - JitCompilations, tune your iterations"
    println "\tstack - which methods used most time"
    println "\tgc - print garbage collection stats"
    println "\ths_thr - thread usage"
    println "\tprofilers.FlightRecordingProfiler - Create a flight recorder profile"
    
    println ""
    println "Change report format from JSON to one of [CSV, JSON, NONE, SCSV, TEXT]:"
    println "\tgw jmh -Pformat=csv"
    
    println ""
    println "Specify JVM arguments:"
    println "\tgw jmh -PjvmArgs=\"-Dtest.cluster=local\""
    
    println ""
    println "Run in verification mode (execute benchmarks with minimum of fork/warmup-/benchmark-iterations):"
    println "\tgw jmh -Pverify"

    println ""
    println "Resources:"
    println "\thttp://tutorials.jenkov.com/java-performance/jmh.html (Introduction)"
    println "\thttp://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/ (Samples)"
}

task jmhProfilers(type: JavaExec, description:'Lists the available profilers for the jmh task', group: 'Development') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'
    args '-lprof'
}

task jmh(type: JavaExec, description: 'Executing JMH benchmarks', group:'Development') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'
    
    def include = project.properties.get('include', '');
    def exclude = project.properties.get('exclude');
    def format = project.properties.get('format', 'json');
    def profilers = project.properties.get('profilers');
    def jvmArgs = project.properties.get('jvmArgs');
    def verify =  project.properties.get('verify');
    
    def resultFile = file("build/reports/jmh/result.${format}")
    def tmpDir = new File(buildDir, 'tmp-jmh')
    
    if(!format.equals('json')) {
        println "≥≥ Disabling the 'jmhReport' task since the JMH output has to be 'json', but is '${format}'!";
        gradle.startParameter.excludedTaskNames << 'jmhReport'
    }

    args include
    if(exclude) {
        args '-e', exclude
    }
    if(verify != null) { // execute benchmarks with the minimum amount of execution (only to check if they are working)
        println "≥≥ Running in verify mode"
        args '-f' , 1
        args '-wi' , 1
        args '-i' , 1
    }
    args '-foe', 'true'   //fail-on-error
    args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
    if(profilers) {
        profilers.split(',').each {
            args '-prof', it
        }
    }
    args '-jvmArgsPrepend', '-Xmx3072m'
    args '-jvmArgsPrepend', '-Xms3072m'
    args '-jvmArgsPrepend', '-XX:+UnlockCommercialFeatures'
    args '-jvmArgsPrepend', "-Djava.io.tmpdir=${tmpDir}"
    if(jvmArgs) {
        for(jvmArg in jvmArgs.split(' ')) {
            args '-jvmArgsPrepend', jvmArg
        }
    }
    args '-rf', format
    args '-rff', resultFile
    
    // Options for JFR profiler.
    // Not possible to define JFR options via the settings parameter (see https://community.oracle.com/message/12256978#12256978) - Thus edit $JAVA_HOME//jre/lib/jfr/default.jfc
    systemProperty 'jmh.jfr.saveTo', 'build/reports/jmh/'

    doFirst {
        println "\nExecuting JMH with: $args \n"
        resultFile.parentFile.mkdirs()
        tmpDir.mkdirs()
    }
}

jmhReport {
    jmhResultPath = project.file('build/reports/jmh/result.json')
    jmhReportOutput = project.file('build/reports/jmh')
}
tasks.jmhReport.group = 'Development'
tasks.jmh.finalizedBy tasks.jmhReport

